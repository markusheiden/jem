  @SuppressWarnings({"Convert2Lambda", "Anonymous2MethodRef", "SpellCheckingInspection"})
  private final Opcode[] OPCODES =
    {
      this::opcode00,
      this::opcode01,
      this::opcode02,
      this::opcode03,
      this::opcode04,
      this::opcode05,
      this::opcode06,
      this::opcode07,
      this::opcode08,
      this::opcode09,
      this::opcode0A,
      this::opcode0B,
      this::opcode0C,
      this::opcode0D,
      this::opcode0E,
      this::opcode0F,

      this::opcode10,
      this::opcode11,
      this::opcode12,
      this::opcode13,
      this::opcode14,
      this::opcode15,
      this::opcode16,
      this::opcode17,
      this::opcode18,
      this::opcode19,
      this::opcode1A,
      this::opcode1B,
      this::opcode1C,
      this::opcode1D,
      this::opcode1E,
      this::opcode1F,

      this::opcode20,
      this::opcode21,
      this::opcode22,
      this::opcode23,
      this::opcode24,
      this::opcode25,
      this::opcode26,
      this::opcode27,
      this::opcode28,
      this::opcode29,
      this::opcode2A,
      this::opcode2B,
      this::opcode2C,
      this::opcode2D,
      this::opcode2E,
      this::opcode2F,

      this::opcode30,
      this::opcode31,
      this::opcode32,
      this::opcode33,
      this::opcode34,
      this::opcode35,
      this::opcode36,
      this::opcode37,
      this::opcode38,
      this::opcode39,
      this::opcode3A,
      this::opcode3B,
      this::opcode3C,
      this::opcode3D,
      this::opcode3E,
      this::opcode3F,

      this::opcode40,
      this::opcode41,
      this::opcode42,
      this::opcode43,
      this::opcode44,
      this::opcode45,
      this::opcode46,
      this::opcode47,
      this::opcode48,
      this::opcode49,
      this::opcode4A,
      this::opcode4B,
      this::opcode4C,
      this::opcode4D,
      this::opcode4E,
      this::opcode4F,

      this::opcode50,
      this::opcode51,
      this::opcode52,
      this::opcode53,
      this::opcode54,
      this::opcode55,
      this::opcode56,
      this::opcode57,
      this::opcode58,
      this::opcode59,
      this::opcode5A,
      this::opcode5B,
      this::opcode5C,
      this::opcode5D,
      this::opcode5E,
      this::opcode5F,

      this::opcode60,
      this::opcode61,
      this::opcode62,
      this::opcode63,
      this::opcode64,
      this::opcode65,
      this::opcode66,
      this::opcode67,
      this::opcode68,
      this::opcode69,
      this::opcode6A,
      this::opcode6B,
      this::opcode6C,
      this::opcode6D,
      this::opcode6E,
      this::opcode6F,

      this::opcode70,
      this::opcode71,
      this::opcode72,
      this::opcode73,
      this::opcode74,
      this::opcode75,
      this::opcode76,
      this::opcode77,
      this::opcode78,
      this::opcode79,
      this::opcode7A,
      this::opcode7B,
      this::opcode7C,
      this::opcode7D,
      this::opcode7E,
      this::opcode7F,

      this::opcode80,
      this::opcode81,
      this::opcode82,
      this::opcode83,
      this::opcode84,
      this::opcode85,
      this::opcode86,
      this::opcode87,
      this::opcode88,
      this::opcode89,
      this::opcode8A,
      this::opcode8B,
      this::opcode8C,
      this::opcode8D,
      this::opcode8E,
      this::opcode8F,

      this::opcode90,
      this::opcode91,
      this::opcode92,
      this::opcode93,
      this::opcode94,
      this::opcode95,
      this::opcode96,
      this::opcode97,
      this::opcode98,
      this::opcode99,
      this::opcode9A,
      this::opcode9B,
      this::opcode9C,
      this::opcode9D,
      this::opcode9E,
      this::opcode9F,

      this::opcodeA0,
      this::opcodeA1,
      this::opcodeA2,
      this::opcodeA3,
      this::opcodeA4,
      this::opcodeA5,
      this::opcodeA6,
      this::opcodeA7,
      this::opcodeA8,
      this::opcodeA9,
      this::opcodeAA,
      this::opcodeAB,
      this::opcodeAC,
      this::opcodeAD,
      this::opcodeAE,
      this::opcodeAF,

      this::opcodeB0,
      this::opcodeB1,
      this::opcodeB2,
      this::opcodeB3,
      this::opcodeB4,
      this::opcodeB5,
      this::opcodeB6,
      this::opcodeB7,
      this::opcodeB8,
      this::opcodeB9,
      this::opcodeBA,
      this::opcodeBB,
      this::opcodeBC,
      this::opcodeBD,
      this::opcodeBE,
      this::opcodeBF,

      this::opcodeC0,
      this::opcodeC1,
      this::opcodeC2,
      this::opcodeC3,
      this::opcodeC4,
      this::opcodeC5,
      this::opcodeC6,
      this::opcodeC7,
      this::opcodeC8,
      this::opcodeC9,
      this::opcodeCA,
      this::opcodeCB,
      this::opcodeCC,
      this::opcodeCD,
      this::opcodeCE,
      this::opcodeCF,

      this::opcodeD0,
      this::opcodeD1,
      this::opcodeD2,
      this::opcodeD3,
      this::opcodeD4,
      this::opcodeD5,
      this::opcodeD6,
      this::opcodeD7,
      this::opcodeD8,
      this::opcodeD9,
      this::opcodeDA,
      this::opcodeDB,
      this::opcodeDC,
      this::opcodeDD,
      this::opcodeDE,
      this::opcodeDF,

      this::opcodeE0,
      this::opcodeE1,
      this::opcodeE2,
      this::opcodeE3,
      this::opcodeE4,
      this::opcodeE5,
      this::opcodeE6,
      this::opcodeE7,
      this::opcodeE8,
      this::opcodeE9,
      this::opcodeEA,
      this::opcodeEB,
      this::opcodeEC,
      this::opcodeED,
      this::opcodeEE,
      this::opcodeEF,

      this::opcodeF0,
      this::opcodeF1,
      this::opcodeF2,
      this::opcodeF3,
      this::opcodeF4,
      this::opcodeF5,
      this::opcodeF6,
      this::opcodeF7,
      this::opcodeF8,
      this::opcodeF9,
      this::opcodeFA,
      this::opcodeFB,
      this::opcodeFC,
      this::opcodeFD,
      this::opcodeFE,
      this::opcodeFF
    };

  @Interruptible
  final void opcode00() // $00: BRK (7)
  {
    readBytePC();
    pushWord(_state.PC);
    _state.B = true;
    pushByte(_state.getP());
    _state.I = true;
    _state.PC = readAbsoluteAddress(0xFFFE);
  }

  @Interruptible
  final void opcode01() // $01: ORA ($XX,X) (6) // izx
  {
    or(read(readZeropageIndirectXAddressPC()));
  }


  @Interruptible
  final void opcode02() // $02: *KIL (*) // TODO imm?
  {
    // Use opcode $02 as escape
    Patch patch = patches.get(_state.PC - 1);
    if (patch != null) {
      int opcode = patch.execute(_state, _bus);
      if (opcode >= 0) {
        OPCODES[opcode].execute();
      }
    } else {
      // no patch -> standard behaviour: crash
      crash();
    }
  }

  @Interruptible
  final void opcode03() // $03: *SLO ($XX,X) (8) // izx
  {
    slo(readZeropageIndirectXAddressPC());
  }

  @Interruptible
  final void opcode04() // $04: *NOP $XX (3) // zp
  {
    read(readAbsoluteZeropageAddressPC());
    nop();
  }

  @Interruptible
  final void opcode05() // $05: ORA $XX (3) // zp
  {
    or(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcode06() // $06: ASL $XX (5) // zp
  {
    int addr = readAbsoluteZeropageAddressPC();
    write(shiftLeft(read(addr)), addr);
  }

  @Interruptible
  final void opcode07() // $07: *SLO $XX (5) // zp
  {
    slo(readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcode08() // $08: PHP (3) // no
  {
    pushByte(_state.getP());
  }

  @Interruptible
  final void opcode09() // $09: ORA #$XX (2)
  {
    or(readImmediatePC());
  }

  @Interruptible
  final void opcode0A() // $0A: ASL (2) // no
  {
    _state.A = shiftLeft(_state.A);
  }

  @Interruptible
  final void opcode0B() // $0B: *ANC #$XX (2)
  {
    anc(readImmediatePC());
  }

  @Interruptible
  final void opcode0C() // $0C: *NOP $XXXX (4) // abs
  {
    read(readAbsoluteAddressPC());
    nop();
  }

  @Interruptible
  final void opcode0D() // $0D: ORA $XXXX (4)
  {
    or(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcode0E() // $0E: ASL $XXXX (6)
  {
    int addr = readAbsoluteAddressPC();
    write(shiftLeft(read(addr)), addr);
  }

  @Interruptible
  final void opcode0F() // $0F: *SLO $XXXX (6)
  {
    slo(readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcode10() // $10: BPL $XXXX (2/3) // rel
  {
    branchIf(!_state.N);
  }

  @Interruptible
  final void opcode11() // $11: ORA ($XX),Y (5) // izy
  {
    or(read(readZeropageIndirectYAddressPC()));
  }

  @Interruptible
  final void opcode12() // $12: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcode13() // $13: *SLO ($XX),Y (8) // izy
  {
    // TODO 1 tick
    slo(readZeropageIndirectYAddressPC());
  }

  @Interruptible
  final void opcode14() // $14: *NOP $XX,X (4) // zpx
  {
    read(readAbsoluteZeropageAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcode15() // $15: ORA $XX,X (4) // zpx
  {
    or(read(readAbsoluteZeropageAddressPC(_state.X)));
  }

  @Interruptible
  final void opcode16() // $16: ASL $XX,X (6) // zpx
  {
    int addr = readAbsoluteZeropageAddressPC(_state.X);
    write(shiftLeft(read(addr)), addr);
  }

  @Interruptible
  final void opcode17() // $17: *SLO $XX,X (6) // zpx
  {
    slo(readAbsoluteZeropageAddressPC(_state.X));
  }

  @Interruptible
  final void opcode18() // $18: CLC (2) // no
  {
    idleRead(); // during operation
    _state.C = false;
  }

  @Interruptible
  final void opcode19() // $19: ORA $XXXX,Y (4)
  {
    or(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcode1A() // $1A: *NOP (2) // no
  {
    readImpliedPC();
    nop();
  }

  @Interruptible
  final void opcode1B() // $1B: *SLO $XXXX,Y (7)
  {
    // TODO 1 tick
    slo(readAbsoluteAddressPC(_state.Y));
  }

  @Interruptible
  final void opcode1C() // $1C: *NOP $XXXX,X (5) // abx
  {
    read(readAbsoluteAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcode1D() // $1D: ORA $XXXX,X (4)
  {
    or(read(readAbsoluteAddressPC(_state.X)));
  }

  @Interruptible
  final void opcode1E() // $1E: ASL $XXXX,X (7)
  {
    // TODO 1 tick
    int addr = readAbsoluteAddressPC(_state.X);
    write(shiftLeft(read(addr)), addr);
  }

  @Interruptible
  final void opcode1F() // $1F: *SLO $XXXX,X (7)
  {
    // TODO 1 tick
    slo(readAbsoluteAddressPC(_state.X));
  }

  @Interruptible
  final void opcode20() // $20: JSR $XXXX (6) (TODO rework: see AAY64)
  {
    int addr = readAbsoluteAddressPC();
    int returnAddr = (_state.PC - 1) & 0xFFFF;
    _tick.waitForTick(); // internal operation
    pushWord(returnAddr);
    _state.PC = addr;
  }

  @Interruptible
  final void opcode21() // $21: AND ($XX,X) (6) // izx
  {
    and(read(readZeropageIndirectXAddressPC()));
  }

  @Interruptible
  final void opcode22() // $22: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcode23() // $23: *RLA ($XX,X) (8) // izx
  {
    rla(readZeropageIndirectXAddressPC());
  }

  @Interruptible
  final void opcode24() // $24: BIT $XX (4) // zp
  {
    bit(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcode25() // $25: AND $XX (3) // zp
  {
    and(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcode26() // $26: ROL $XX (5) // zp
  {
    int addr = readAbsoluteZeropageAddressPC();
    write(rotateLeft(read(addr)), addr);
  }

  @Interruptible
  final void opcode27() // $27: *RLA $XX (5) // zp
  {
    rla(readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcode28() // $28: PLP (4) // no
  {
    _state.setP(popByte());
  }

  @Interruptible
  final void opcode29() // $29: AND #$XX (2)
  {
    and(readImmediatePC());
  }

  @Interruptible
  final void opcode2A() // $2A: ROL (2) // no
  {
    _state.A = rotateLeft(_state.A);
  }

  @Interruptible
  final void opcode2B() // $2B: *ANC #$XX (2)
  {
    anc(readImmediatePC());
  }

  @Interruptible
  final void opcode2C() // $2C: BIT $XXXX (4)
  {
    bit(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcode2D() // $2D: AND $XXXX (4)
  {
    and(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcode2E() // $2E: ROL $XXXX (6)
  {
    int addr = readAbsoluteAddressPC();
    write(rotateLeft(read(addr)), addr);
  }

  @Interruptible
  final void opcode2F() // $2F: *RLA $XXXX (6)
  {
    rla(readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcode30() // $30: BMI $XXXX (2/3) // rel
  {
    branchIf(_state.N);
  }

  @Interruptible
  final void opcode31() // $31: AND ($XX),Y (5) // izy
  {
    and(read(readZeropageIndirectYAddressPC()));
  }

  @Interruptible
  final void opcode32() // $32: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcode33() // $33: *RLA ($XX),Y (8) // izy
  {
    // TODO 1 tick
    rla(readZeropageIndirectYAddressPC());
  }

  @Interruptible
  final void opcode34() // $34: *NOP $XX,X (4) // zpx
  {
    read(readAbsoluteZeropageAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcode35() // $35: AND $XX,X (4) // zpx
  {
    and(read(readAbsoluteZeropageAddressPC(_state.X)));
  }

  @Interruptible
  final void opcode36() // $36: ROL $XX,X (6) // zpx
  {
    int addr = readAbsoluteZeropageAddressPC(_state.X);
    write(rotateLeft(read(addr)), addr);
  }

  @Interruptible
  final void opcode37() // $37: *RLA $XX,X (6) // zpx
  {
    rla(readAbsoluteZeropageAddressPC(_state.X));
  }

  @Interruptible
  final void opcode38() // $38: SEC (2) // no
  {
    idleRead(); // during operation
    _state.C = true;
  }

  @Interruptible
  final void opcode39() // $39: AND $XXXX,Y (4)
  {
    and(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcode3A() // $3A: *NOP (2) // no
  {
    readImpliedPC();
    nop();
  }

  @Interruptible
  final void opcode3B() // $3B: *RLA $XXXX,Y (7)
  {
    // TODO 1 tick
    rla(readAbsoluteAddressPC(_state.Y));
  }

  @Interruptible
  final void opcode3C() // $3C: *NOP $XXXX,X (5) // abx
  {
    read(readAbsoluteAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcode3D() // $3D: AND $XXXX,X (4) // abx
  {
    and(read(readAbsoluteAddressPC(_state.X)));
  }

  @Interruptible
  final void opcode3E() // $3E: ROL $XXXX,X (7)
  {
    // TODO 1 tick
    int addr = readAbsoluteAddressPC(_state.X);
    write(rotateLeft(read(addr)), addr);
  }

  @Interruptible
  final void opcode3F() // $3F: *RLA $XXXX,X (7)
  {
    // TODO 1 tick
    rla(readAbsoluteAddressPC(_state.X));
  }

  @Interruptible
  final void opcode40() // $40: RTI (6)
  {
    // TODO 2 ticks
    _state.setP(popByte());
    _state.PC = popWord();
  }

  @Interruptible
  final void opcode41() // $41: EOR ($XX,X) (6) // izx
  {
    xor(read(readZeropageIndirectXAddressPC()));
  }

  @Interruptible
  final void opcode42() // $42: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcode43() // $43: *LSE ($XX,X) // izx
  {
    lse(readZeropageIndirectXAddressPC());
  }

  @Interruptible
  final void opcode44() // $44: *NOP $XX (3) // zp
  {
    read(readAbsoluteZeropageAddressPC());
    nop();
  }

  @Interruptible
  final void opcode45() // $45: EOR $XX (3) // zp
  {
    xor(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcode46() // $46: LSR $XX (5) // zp
  {
    int addr = readAbsoluteZeropageAddressPC();
    write(shiftRight(read(addr)), addr);
  }

  @Interruptible
  final void opcode47() // $47: *LSE $XX // zp
  {
    lse(readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcode48() // $48: PHA (3) // no
  {
    pushByte(_state.A);
  }

  @Interruptible
  final void opcode49() // $49: EOR #$XX (2)
  {
    xor(readImmediatePC());
  }

  @Interruptible
  final void opcode4A() // $4A: LSR (2) // no
  {
    _state.A = shiftRight(_state.A);
  }

  @Interruptible
  final void opcode4B() // $4B: ALR #$XX (2)
  {
    alr(readImmediatePC());
  }

  @Interruptible
  final void opcode4C() // $4C: JMP $XXXX (3) (AAY64)
  {
    _state.PC = readAbsoluteAddressPC();
  }

  @Interruptible
  final void opcode4D() // $4D: EOR $XXXX (4)
  {
    xor(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcode4E() // $4E: LSR $XXXX (6)
  {
    int addr = readAbsoluteAddressPC();
    write(shiftRight(read(addr)), addr);
  }

  @Interruptible
  final void opcode4F() // $4F: *LSE $XXXX
  {
    lse(readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcode50() // $50: BVC $XXXX (2/3) // rel
  {
    branchIf(!_state.V);
  }

  @Interruptible
  final void opcode51() // $51: EOR ($XX),Y (5) // izy
  {
    xor(read(readZeropageIndirectYAddressPC()));
  }

  @Interruptible
  final void opcode52() // $52: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcode53() // $53: *LSE ($XX),Y // izy
  {
    lse(readZeropageIndirectYAddressPC());
  }

  @Interruptible
  final void opcode54() // $54: *NOP $XX,X (4) // zpx
  {
    read(readAbsoluteZeropageAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcode55() // $55: EOR $XX,X (4) // zpx
  {
    xor(read(readAbsoluteZeropageAddressPC(_state.X)));
  }

  @Interruptible
  final void opcode56() // $56: LSR $XX,X (6) // zpx
  {
    int addr = readAbsoluteZeropageAddressPC(_state.X);
    write(shiftRight(read(addr)), addr);
  }

  @Interruptible
  final void opcode57() // $57: *LSE $XX,X // zpx
  {
    lse(readAbsoluteZeropageAddressPC(_state.X));
  }

  @Interruptible
  final void opcode58() // $58: CLI (2) // no
  {
    idleRead(); // during operation
    _state.cli();
  }

  @Interruptible
  final void opcode59() // $59: EOR $XXXX,Y (4)
  {
    xor(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcode5A() // $5A: *NOP (2) // no
  {
    readImpliedPC();
    nop();
  }

  @Interruptible
  final void opcode5B() // $5B: *LSE $XXXX,Y
  {
    lse(readAbsoluteAddressPC(_state.Y));
  }

  @Interruptible
  final void opcode5C() // $5C: *NOP $XXXX,X (5) // abx
  {
    read(readAbsoluteAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcode5D() // $5D: EOR $XXXX,X (4)
  {
    xor(read(readAbsoluteAddressPC(_state.X)));
  }

  @Interruptible
  final void opcode5E() // $5E: LSR $XXXX,X (7)
  {
    // TODO 1 tick
    int addr = readAbsoluteAddressPC(_state.X);
    write(shiftRight(read(addr)), addr);
  }

  @Interruptible
  final void opcode5F() // $5F: *LSE $XXXX,X
  {
    lse(readAbsoluteAddressPC(_state.X));
  }

  @Interruptible
  final void opcode60() // $60: RTS (6)
  {
    rts();
  }

  @Interruptible
  final void opcode61() // $61: ADC ($XX,X) (6) // izx
  {
    add(read(readZeropageIndirectXAddressPC()));
  }

  @Interruptible
  final void opcode62() // $62: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcode63() // $63: *RRA ($XX,X) // izx
  {
    rra(readZeropageIndirectXAddressPC());
  }

  @Interruptible
  final void opcode64() // $64: *NOP $XX (3) // zp
  {
    read(readAbsoluteZeropageAddressPC());
    nop();
  }

  @Interruptible
  final void opcode65() // $65: ADC $XX (3) // zp
  {
    add(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcode66() // $66: ROR $XX (5) // zp
  {
    int addr = readAbsoluteZeropageAddressPC();
    write(rotateRight(read(addr)), addr);
  }

  @Interruptible
  final void opcode67() // $67: *RRA $XX // zp
  {
    rra(readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcode68() // $68: PLA (4) // no
  {
    int a = popByte();
    _state.setZeroNegativeP(a);
    _state.A = a;
  }

  @Interruptible
  final void opcode69() // $69: ADC #$XX (2)
  {
    add(readImmediatePC());
  }

  @Interruptible
  final void opcode6A() // $6A: ROR (2) // no
  {
    _state.A = rotateRight(_state.A);
  }

  @Interruptible
  final void opcode6B() // $6B: *ARR #$XX (2)
  {
    arr(readImmediatePC());
  }

  @Interruptible
  final void opcode6C() // $6C: JMP ($XXXX) (5)
  {
    _state.PC = readIndirectAddress();
  }

  @Interruptible
  final void opcode6D() // $6D: ADC $XXXX (4)
  {
    add(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcode6E() // $6E: ROR $XXXX (6)
  {
    int addr = readAbsoluteAddressPC();
    write(rotateRight(read(addr)), addr);
  }

  @Interruptible
  final void opcode6F() // $6F: *RRA $XXXX
  {
    rra(readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcode70() // $70: BVS $XXXX (2/3) // rel
  {
    branchIf(_state.V);
  }

  @Interruptible
  final void opcode71() // $71: ADC ($XX),Y (4) // izy
  {
    add(read(readZeropageIndirectYAddressPC()));
  }

  @Interruptible
  final void opcode72() // $72: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcode73() // $73: *RRA ($XX),Y // izy
  {
    rra(readZeropageIndirectYAddressPC());
  }

  @Interruptible
  final void opcode74() // $74: *NOP $XX,X (4) // zpx
  {
    read(readAbsoluteZeropageAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcode75() // $75: ADC $XX,X (4) // zpx
  {
    add(read(readAbsoluteZeropageAddressPC(_state.X)));
  }

  @Interruptible
  final void opcode76() // $76: ROR $XX,X (6) // zpx
  {
    int addr = readAbsoluteZeropageAddressPC(_state.X);
    write(rotateRight(read(addr)), addr);
  }

  @Interruptible
  final void opcode77() // $77: *RRA $XX,X // zpx
  {
    rra(readAbsoluteZeropageAddressPC(_state.X));
  }

  @Interruptible
  final void opcode78() // $78: SEI (2) // no
  {
    idleRead(); // during operation
    _state.sei();
  }

  @Interruptible
  final void opcode79() // $79: ADC $XXXX,Y (5)
  {
    add(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcode7A() // $7A: *NOP (2) // no
  {
    readImpliedPC();
    nop();
  }

  @Interruptible
  final void opcode7B() // $7B: *RRA $XXXX,Y
  {
    rra(readAbsoluteAddressPC(_state.Y));
  }

  @Interruptible
  final void opcode7C() // $7C: *NOP $XXXX,X (5) // abx
  {
    read(readAbsoluteAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcode7D() // $7D: ADC $XXXX,X (4)
  {
    add(read(readAbsoluteAddressPC(_state.X)));
  }

  @Interruptible
  final void opcode7E() // $7E: ROR $XXXX,X (7)
  {
    // TODO 1 ticks
    int addr = readAbsoluteAddressPC(_state.X);
    write(rotateRight(read(addr)), addr);
  }

  @Interruptible
  final void opcode7F() // $7F: *RRA $XXXX,X
  {
    rra(readAbsoluteAddressPC(_state.X));
  }

  @Interruptible
  final void opcode80() // $80: *NOP #$XX (2) // imm
  {
    readImmediatePC();
    nop();
  }

  @Interruptible
  final void opcode81() // $81: STA ($XX,X) (6) // izx
  {
    write(_state.A, readZeropageIndirectXAddressPC());
  }

  @Interruptible
  final void opcode82() // $82: *NOP #$XX (2) // imm
  {
    readImmediatePC();
    nop();
  }

  @Interruptible
  final void opcode83() // $83: *AXS ($XX,X) // izx
  {
    axs(readZeropageIndirectXAddressPC());
  }

  @Interruptible
  final void opcode84() // $84: STY $XX (3) // zp
  {
    write(_state.Y, readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcode85() // $85: STA $XX (3) // zp
  {
    write(_state.A, readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcode86() // $86: STX $XX (3) // zp
  {
    write(_state.X, readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcode87() // $87: *AXS $XX // zp
  {
    axs(readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcode88() // $88: DEY (2) // no
  {
    _state.Y = decrement(_state.Y);
  }

  @Interruptible
  final void opcode89() // $89: *NOP (2) // imm
  {
    readImmediatePC();
    nop();
  }

  @Interruptible
  final void opcode8A() // $8A: TXA (2) // no
  {
    _state.A = load(_state.X);
  }

  @Interruptible
  final void opcode8B() // $8B: *XAA #$XX (?)
  {
    xaa(readImmediatePC());
  }

  @Interruptible
  final void opcode8C() // $8C: STY $XXXX (4)
  {
    write(_state.Y, readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcode8D() // $8D: STA $XXXX (4)
  {
    write(_state.A, readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcode8E() // $8E: STX $XXXX (4)
  {
    write(_state.X, readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcode8F() // $8F: *AXS $XXXX
  {
    axs(readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcode90() // $90: BCC $XXXX (2/3) // rel
  {
    branchIf(!_state.C);
  }

  @Interruptible
  final void opcode91() // $91: STA ($XX),Y (6) // izy
  {
    write(_state.A, readZeropageIndirectYAddressPC());
  }

  @Interruptible
  final void opcode92() // $92: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcode93() // $93: *AHX ($XX),Y
  {
    int addr = readZeropageIndirectYAddressPC();
    ahx(read(addr), addr);
  }

  @Interruptible
  final void opcode94() // $94: STY $XX,X (4) // zpx
  {
    write(_state.Y, readAbsoluteZeropageAddressPC(_state.X));
  }

  @Interruptible
  final void opcode95() // $95: STA $XX,X (4) // zpx
  {
    write(_state.A, readAbsoluteZeropageAddressPC(_state.X));
  }

  @Interruptible
  final void opcode96() // $96: STX $XX,Y (4) // zpy
  {
    write(_state.X, readAbsoluteZeropageAddressPC(_state.Y));
  }

  @Interruptible
  final void opcode97() // $97: *AXS $XX,Y // zpy
  {
    axs(readAbsoluteZeropageAddressPC(_state.Y));
  }

  @Interruptible
  final void opcode98() // $98: TYA (2) // no
  {
    _state.A = load(_state.Y);
  }

  @Interruptible
  final void opcode99() // $99: STA $XXXX,Y (5)
  {
    // TODO 1 tick
    write(_state.A, readAbsoluteAddressPC(_state.Y));
  }

  @Interruptible
  final void opcode9A() // $9A: TXS (2) // no
  {
    idleRead(); // during operation
    _state.S = _state.X; // no update of P !!!
  }

  @Interruptible
  final void opcode9B() // $9B: *TAS $XXXX,Y
  {
    tas(readAbsoluteAddressPC(_state.Y));
  }

  @Interruptible
  final void opcode9C() // $9C: *SHY $XXXX,X
  {
    int addr = readAbsoluteAddressPC(_state.X);
    shy(read(addr), addr);
  }

  @Interruptible
  final void opcode9D() // $9D: STA $XXXX,X (5)
  {
    write(_state.A, readAbsoluteAddressPC(_state.X));
  }

  @Interruptible
  final void opcode9E() // $9E: *SHX $XXXX,Y
  {
    int addr = readAbsoluteAddressPC(_state.Y);
    shx(read(addr), addr);
  }

  @Interruptible
  final void opcode9F() // $9F: *AHX $XXXX,Y
  {
    int addr = readAbsoluteAddressPC(_state.Y);
    ahx(read(addr), addr);
  }

  @Interruptible
  final void opcodeA0() // $A0: LDY #$XX (2) // imm
  {
    _state.Y = load(readImmediatePC());
  }

  @Interruptible
  final void opcodeA1() // $A1: LDA ($XX,X) (6) // izx
  {
    _state.A = load(read(readZeropageIndirectXAddressPC()));
  }

  @Interruptible
  final void opcodeA2() // $A2: LDX #$XX (2) // imm
  {
    _state.X = load(readImmediatePC());
  }

  @Interruptible
  final void opcodeA3() // $A3: *LAX ($XX,X) // izx
  {
    lax(read(readZeropageIndirectXAddressPC()));
  }

  @Interruptible
  final void opcodeA4() // $A4: LDY $XX (3) // zp
  {
    _state.Y = load(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcodeA5() // $A5: LDA $XX (3) // zp
  {
    _state.A = load(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcodeA6() // $A6: LDX $XX (3) // zp
  {
    _state.X = load(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcodeA7() // $A7: *LAX $XX // zp
  {
    lax(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcodeA8() // $A8: TAY (2) // no
  {
    _state.Y = load(_state.A);
  }

  @Interruptible
  final void opcodeA9() // $A9: LDA #$XX (2)
  {
    _state.A = load(readImmediatePC());
  }

  @Interruptible
  final void opcodeAA() // $AA: TAX (2) // no
  {
    _state.X = load(_state.A);
  }

  @Interruptible
  final void opcodeAB() // $AB: LXA #$XX (?)
  {
    lxa(readImmediatePC());
  }

  @Interruptible
  final void opcodeAC() // $AC: LDY $XXXX (4)
  {
    _state.Y = load(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcodeAD() // $AD: LDA $XXXX (4)
  {
    _state.A = load(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcodeAE() // $AE: LDX $XXXX (4)
  {
    _state.X = load(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcodeAF() // $AF: *LAX $XXXX
  {
    lax(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcodeB0() // $B0: BCS $XXXX (2/3) // rel
  {
    branchIf(_state.C);
  }

  @Interruptible
  final void opcodeB1() // $B1: LDA ($XX),Y (5) // izy
  {
    _state.A = load(read(readZeropageIndirectYAddressPC()));
  }

  @Interruptible
  final void opcodeB2() // $B2: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcodeB3() // $B3: *LAX ($XX),Y // izy
  {
    lax(read(readZeropageIndirectYAddressPC()));
  }

  @Interruptible
  final void opcodeB4() // $B4: LDY $XX,X (4) // zpx
  {
    _state.Y = load(read(readAbsoluteZeropageAddressPC(_state.X)));
  }

  @Interruptible
  final void opcodeB5() // $B5: LDA $XX,X (4) // zpx
  {
    _state.A = load(read(readAbsoluteZeropageAddressPC(_state.X)));
  }

  @Interruptible
  final void opcodeB6() // $B6: LDX $XX,Y (4) // zpy
  {
    _state.X = load(read(readAbsoluteZeropageAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcodeB7() // $B7: *LAX $XX,Y // zpy
  {
    lax(read(readAbsoluteZeropageAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcodeB8() // $B8: CLV (2) // no
  {
    idleRead(); // during operation
    _state.V = false;
  }

  @Interruptible
  final void opcodeB9() // $B9: LDA $XXXX,Y (4)
  {
    _state.A = load(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcodeBA() // $BA: TSX (2) // no
  {
    _state.X = load(_state.S);
  }

  @Interruptible
  final void opcodeBB() // $BB: *LAS $XXXX,Y (4?)
  {
    las(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcodeBC() // $BC: LDY $XXXX,X (4)
  {
    _state.Y = load(read(readAbsoluteAddressPC(_state.X)));
  }

  @Interruptible
  final void opcodeBD() // $BD: LDA $XXXX,X (4)
  {
    _state.A = load(read(readAbsoluteAddressPC(_state.X)));
  }

  @Interruptible
  final void opcodeBE() // $BE: LDX $XXXX,Y (4)
  {
    _state.X = load(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcodeBF() // $BF: *LAX $XXXX,Y
  {
    lax(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcodeC0() // $C0: CPY #$XX (2) // imm
  {
    compare(_state.Y, readImmediatePC());
  }

  @Interruptible
  final void opcodeC1() // $C1: CMP ($XX,X) (6) // izx
  {
    compare(_state.A, read(readZeropageIndirectXAddressPC()));
  }

  @Interruptible
  final void opcodeC2() // $C2: *NOP #$XX (2) // imm
  {
    readImmediatePC();
    nop();
  }

  @Interruptible
  final void opcodeC3() // $C3: *DCM ($XX,X) // izx
  {
    dcm(readZeropageIndirectXAddressPC());
  }

  @Interruptible
  final void opcodeC4() // $C4: CPY $XX (3) // zp
  {
    compare(_state.Y, read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcodeC5() // $C5: CMP $XX (3) // zp
  {
    compare(_state.A, read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcodeC6() // $C6: DEC $XX (5) // zp
  {
    int addr = readAbsoluteZeropageAddressPC();
    write(decrement(read(addr)), addr);
  }

  @Interruptible
  final void opcodeC7() // $C7: *DCM $XX // zp
  {
    dcm(readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcodeC8() // $C8: INY (2) // no
  {
    _state.Y = increment(_state.Y);
  }

  @Interruptible
  final void opcodeC9() // $C9: CMP #$XX (2)
  {
    compare(_state.A, readImmediatePC());
  }

  @Interruptible
  final void opcodeCA() // $CA: DEX (2) // no
  {
    _state.X = decrement(_state.X);
  }

  @Interruptible
  final void opcodeCB() // $CB: *SAX #$XX (?)
  {
    sax(readImmediatePC());
  }

  @Interruptible
  final void opcodeCC() // $CC: CPY $XXXX (4)
  {
    compare(_state.Y, read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcodeCD() // $CD: CMP $XXXX (4)
  {
    compare(_state.A, read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcodeCE() // $CE: DEC $XXXX (6)
  {
    int addr = readAbsoluteAddressPC();
    write(decrement(read(addr)), addr);
  }

  @Interruptible
  final void opcodeCF() // $CF: *DCM $XXXX
  {
    dcm(readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcodeD0() // $D0: BNE $XXXX (2/3) // rel
  {
    branchIf(!_state.Z);
  }

  @Interruptible
  final void opcodeD1() // $D1: CMP ($XX),Y (5) // izy
  {
    compare(_state.A, read(readZeropageIndirectYAddressPC()));
  }

  @Interruptible
  final void opcodeD2() // $D2: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcodeD3() // $D3: *DCM ($XX),Y // izy
  {
    dcm(readZeropageIndirectYAddressPC());
  }

  @Interruptible
  final void opcodeD4() // $D4: *NOP $XX,X (4) // zpx
  {
    read(readAbsoluteZeropageAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcodeD5() // $D5: CMP $XX,X (4) // zpx
  {
    compare(_state.A, read(readAbsoluteZeropageAddressPC(_state.X)));
  }

  @Interruptible
  final void opcodeD6() // $D6: DEC $XX,X (6) // zpx
  {
    int addr = readAbsoluteZeropageAddressPC(_state.X);
    write(decrement(read(addr)), addr);
  }

  @Interruptible
  final void opcodeD7() // $D7: *DCM $XX,X // zpx
  {
    dcm(readAbsoluteZeropageAddressPC(_state.X));
  }

  @Interruptible
  final void opcodeD8() // $D8: CLD (2) // no
  {
    idleRead(); // during operation
    _state.D = false;
  }

  @Interruptible
  final void opcodeD9() // $D9: CMP $XXXX,Y (4)
  {
    compare(_state.A, read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcodeDA() // $DA: *NOP (2) // no
  {
    idleRead();
    nop();
  }

  @Interruptible
  final void opcodeDB() // $DB: *DCM $XXXX,Y
  {
    dcm(readAbsoluteAddressPC(_state.Y));
  }

  @Interruptible
  final void opcodeDC() // $DC: *NOP $XXXX,X (5) // abx
  {
    read(readAbsoluteAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcodeDD() // $DD: CMP $XXXX,X (4)
  {
    compare(_state.A, read(readAbsoluteAddressPC(_state.X)));
  }

  @Interruptible
  final void opcodeDE() // $DE: DEC $XXXX,X (7)
  {
    // TODO 1 tick
    int addr = readAbsoluteAddressPC(_state.X);
    write(decrement(read(addr)), addr);
  }

  @Interruptible
  final void opcodeDF() // $DF: *DCM $XXXX,X
  {
    dcm(readAbsoluteAddressPC(_state.X));
  }

  @Interruptible
  final void opcodeE0() // $E0: CPX #$XX (2) // imm
  {
    compare(_state.X, readImmediatePC());
  }

  @Interruptible
  final void opcodeE1() // $E1: SBC ($XX,X) (6) // izx
  {
    subtract(read(readZeropageIndirectXAddressPC()));
  }

  @Interruptible
  final void opcodeE2() // $E2: *NOP #$XX (2) // TODO imm?
  {
    readImmediatePC();
    nop();
  }

  @Interruptible
  final void opcodeE3() // $E3: *INS ($XX,X) // izx
  {
    ins(readZeropageIndirectXAddressPC());
  }

  @Interruptible
  final void opcodeE4() // $E4: CPX $XX (3) // zp
  {
    compare(_state.X, read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcodeE5() // $E5: SBC $XX (3) // zp
  {
    subtract(read(readAbsoluteZeropageAddressPC()));
  }

  @Interruptible
  final void opcodeE6() // $E6: INC $XX (5) // zp
  {
    int addr = readAbsoluteZeropageAddressPC();
    write(increment(read(addr)), addr);
  }

  @Interruptible
  final void opcodeE7() // $E7: *INS $XX // zp
  {
    ins(readAbsoluteZeropageAddressPC());
  }

  @Interruptible
  final void opcodeE8() // $E8: INX (2) // no
  {
    _state.X = increment(_state.X);
  }

  @Interruptible
  final void opcodeE9() // $E9: SBC #$XX (2)
  {
    subtract(readImmediatePC());
  }

  @Interruptible
  final void opcodeEA() // $EA: NOP (2) // no
  {
    idleRead(); // during operation
  }

  @Interruptible
  final void opcodeEB() // $EB: *SBC #$XX (2)
  {
    subtract(readImmediatePC());
  }

  @Interruptible
  final void opcodeEC() // $EC: CPX $XXXX (4)
  {
    compare(_state.X, read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcodeED() // $ED: SBC $XXXX (4)
  {
    subtract(read(readAbsoluteAddressPC()));
  }

  @Interruptible
  final void opcodeEE() // $EE: INC $XXXX (6)
  {
    int addr = readAbsoluteAddressPC();
    write(increment(read(addr)), addr);
  }

  @Interruptible
  final void opcodeEF() // $EF: *INS $XXXX
  {
    ins(readAbsoluteAddressPC());
  }

  @Interruptible
  final void opcodeF0() // $F0: BEQ $XXXX (2/3) // rel
  {
    branchIf(_state.Z);
  }

  @Interruptible
  final void opcodeF1() // $F1: SBC ($XX),Y (5) // izy
  {
    subtract(read(readZeropageIndirectYAddressPC()));
  }

  @Interruptible
  final void opcodeF2() // $F2: *KIL (*) // TODO imm?
  {
    crash();
  }

  @Interruptible
  final void opcodeF3() // $F3: *INS ($XX),Y // izy
  {
    ins(readZeropageIndirectYAddressPC());
  }

  @Interruptible
  final void opcodeF4() // $F4: *NOP $XX,X (4) // zpx
  {
    read(readAbsoluteZeropageAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcodeF5() // $F5: SBC $XX,X (4) // zpx
  {
    subtract(read(readAbsoluteZeropageAddressPC(_state.X)));
  }

  @Interruptible
  final void opcodeF6() // $F6: INC $XX,X (6) // zpx
  {
    int addr = readAbsoluteZeropageAddressPC(_state.X);
    write(increment(read(addr)), addr);
  }

  @Interruptible
  final void opcodeF7() // $F7: *INS $XX,X // zpx
  {
    ins(readAbsoluteZeropageAddressPC(_state.X));
  }

  @Interruptible
  final void opcodeF8() // $F8: SED (2) // no
  {
    idleRead(); // during operation
    _state.D = true;
  }

  @Interruptible
  final void opcodeF9() // $F9: SBC $XXXX,Y (4)
  {
    subtract(read(readAbsoluteAddressPC(_state.Y)));
  }

  @Interruptible
  final void opcodeFA() // $FA: *NOP (2) // no
  {
    idleRead();
    nop();
  }

  @Interruptible
  final void opcodeFB() // $FB: *INS $XXXX,Y
  {
    ins(readAbsoluteAddressPC(_state.Y));
  }

  @Interruptible
  final void opcodeFC() // $FC: *NOP $XXXX,X (5) // abx
  {
    read(readAbsoluteAddressPC(_state.X));
    nop();
  }

  @Interruptible
  final void opcodeFD() // $FD: SBC $XXXX,X (4)
  {
    subtract(read(readAbsoluteAddressPC(_state.X)));
  }

  @Interruptible
  final void opcodeFE() // $FE: INC $XXXX,X (7)
  {
    // TODO 1 tick
    int addr = readAbsoluteAddressPC(_state.X);
    write(increment(read(addr)), addr);
  }

  @Interruptible
  final void opcodeFF() // $FF: *INS $XXXX,X
  {
    ins(readAbsoluteAddressPC(_state.X));
  }
