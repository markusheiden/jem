plugins {
    id 'java-library'
//    id 'kotlin'
    id 'com.github.ben-manes.versions'
}

wrapper {
    gradleVersion = "${gradleVersion}"
}

apply from: 'gradle/javafx.gradle'

group = 'de.heiden'
archivesBaseName = 'jemc64'
version = '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(19))
    }
}

compileJava {
    options.compilerArgs += ["--enable-preview"]
//    options.compilerArgs += ["--add-exports=java.base/jdk.internal.vm=ALL-UNNAMED"]
//    options.release.set(null)
}
compileTestJava {
    options.compilerArgs += ["--enable-preview"]
}

dependencies {
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"

    implementation "org.serialthreads:serialthreads:${serialthreadsVersion}"
    testImplementation "org.serialthreads:serialthreads:${serialthreadsVersion}:tests"

    implementation "de.heiden.c64dt:assembler:${c64dtVersion}"
    implementation "de.heiden.c64dt:bytes:${c64dtVersion}"
    implementation "de.heiden.c64dt:charset:${c64dtVersion}"
    implementation "de.heiden.c64dt:disk:${c64dtVersion}"
    implementation "de.heiden.c64dt:gui:${c64dtVersion}"

    implementation "org.openjfx:javafx-base:${openjfxVersion}:${openjfxPlatform}"
    implementation "org.openjfx:javafx-controls:${openjfxVersion}:${openjfxPlatform}"
    implementation "org.openjfx:javafx-graphics:${openjfxVersion}:${openjfxPlatform}"

    implementation "org.apache.commons:commons-lang3:${commonsLangVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
}

jar {
    manifest {
        attributes(
                'Implementation-Title': 'JemC64',
                'Implementation-Version': archiveVersion,
                // 'Launcher-Agent-Class': 'org.serialthreads.agent.Agent',
                'Main-Class': 'de.heiden.jem.models.c64.C64Serial'
        )
    }

    // TODO markus 2021-05-04: Deduplicate files.
    duplicatesStrategy(DuplicatesStrategy.WARN)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()

    // ignore failing tests
    ignoreFailures = true

    // workaround for gradle (included asm) not supporting jdk8
    scanForTestClasses = false
    // probably have to tweak the include and exclude patterns, depending on the naming scheme you use
    include '**/*Test.*'
    exclude '**/*Abstract*.*'
}

// Hack needed to avoid slf4j alpha version used by the requirements lib.
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.slf4j' && details.requested.name == 'slf4j-api') {
            details.useVersion "${slf4jVersion}"
        }
    }
}
